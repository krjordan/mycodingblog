<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ghost on My Coding Blog</title>
    <link>/tags/ghost/index.xml</link>
    <description>Recent content in Ghost on My Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/ghost/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ghost &amp; Docker</title>
      <link>/post/ghost-docker/</link>
      <pubDate>Thu, 31 Dec 2015 15:03:02 -0600</pubDate>
      
      <guid>/post/ghost-docker/</guid>
      <description>&lt;p&gt;Since I have had this blog up and running, I&amp;rsquo;ve been using ghost with a &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt; virtual machine. If you&amp;rsquo;re looking to go that route, I have written a quick tutorial on that &lt;a href=&#34;http://mycodingblog.com/up-and-running-with-ghost-and-digital-ocean/&#34;&gt;here&lt;/a&gt;. I have not had any issues, but since I have been using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; more and more, I decided it was finally time to throw my blog into a container. I have to admit, it took a few days and a bit of research. Maybe I&amp;rsquo;m still new at this whole coding thing, I know I have a ton to learn, but seriously?&lt;/p&gt;

&lt;p&gt;I ran into a few hiccups, but I did finally find a solution. I am using the &lt;a href=&#34;https://hub.docker.com/_/ghost/&#34;&gt;Official Docker Ghost Image&lt;/a&gt;. It briefly describes how to get it up and running. Well, almost&amp;hellip; The commands given will end up giving you an error:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;ERROR: Unable to access Ghost&#39;s content path:
	EACCES: permission denied, open &#39;/usr/src/ghost/content/apps/ebc538ae3ae45772&#39;

Check that the content path exists and file system permissions are correct.
Help and documentation can be found at http://support.ghost.org.

npm info ghost@0.7.2 Failed to exec start script
npm ERR! Linux 3.10.94-1.el6.elrepo.x86_64
npm ERR! argv &amp;quot;/usr/local/bin/node&amp;quot; &amp;quot;/usr/local/bin/npm&amp;quot; &amp;quot;start&amp;quot;
npm ERR! node v4.2.3
npm ERR! npm  v2.14.7
npm ERR! code ELIFECYCLE
npm ERR! ghost@0.7.2 start: `node index`
npm ERR! Exit status 235
npm ERR!
npm ERR! Failed at the ghost@0.7.2 start script &#39;node index&#39;.
npm ERR! This is most likely a problem with the ghost package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node index
npm ERR! You can get their info via:
npm ERR!     npm owner ls ghost
npm ERR! There is likely additional logging output above.
npm ERR! Linux 3.10.94-1.el6.elrepo.x86_64
npm ERR! argv &amp;quot;/usr/local/bin/node&amp;quot; &amp;quot;/usr/local/bin/npm&amp;quot; &amp;quot;start&amp;quot;
npm ERR! node v4.2.3
npm ERR! npm  v2.14.7
npm ERR! path npm-debug.log.7da2e9feb6af80ea1c45d89105a542fd
npm ERR! code EACCES
npm ERR! errno -13
npm ERR! syscall open

npm ERR! Error: EACCES: permission denied, open &#39;npm-debug.log.7da2e9feb6af80ea1c45d89105a542fd&#39;
npm ERR!     at Error (native)
npm ERR!  { [Error: EACCES: permission denied, open &#39;npm-debug.log.7da2e9feb6af80ea1c45d89105a542fd&#39;]
npm ERR!   errno: -13,
npm ERR!   code: &#39;EACCES&#39;,
npm ERR!   syscall: &#39;open&#39;,
npm ERR!   path: &#39;npm-debug.log.7da2e9feb6af80ea1c45d89105a542fd&#39; }
npm ERR!
npm ERR! Please try running this command again as root/Administrator.

npm ERR! Please include the following file with any support request:
npm ERR!     /usr/src/ghost/npm-debug.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading the comments didn&amp;rsquo;t help me much, but did get me pointed in the right direction. It appears that ghost has permission issues when running in production. However, &lt;a href=&#34;https://github.com/snnd&#34;&gt;@snnd&lt;/a&gt; posted this little &lt;a href=&#34;https://github.com/snnd/docker-ghost-bundle&#34;&gt;gem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I did what he said and it didn&amp;rsquo;t work. I had to make some more changes to the &lt;code class=&#34;language-none&#34;&gt;start.sh&lt;/code&gt; file. In all fairness, it is most likely my fault, but I was able to get it to work.&lt;/p&gt;

&lt;h2 id=&#34;let-s-make-a-ghost-container&#34;&gt;Let&amp;rsquo;s Make a Ghost Container!&lt;/h2&gt;

&lt;p&gt;Be sure to copy your &lt;code class=&#34;language-none&#34;&gt;content&lt;/code&gt; folder if you already have a ghost blog up and running. If you don&amp;rsquo;t, you can add these &lt;a href=&#34;https://github.com/TryGhost/Ghost/tree/master/content&#34;&gt;folders&lt;/a&gt; or use the ones from the &lt;a href=&#34;https://github.com/snnd/docker-ghost-bundle&#34;&gt;repo&lt;/a&gt; mentioned earlier and place them where ever you want your ghost files to live on your host. You will also need a config file. I did a &lt;code class=&#34;language-git&#34;&gt;git clone &lt;a href=&#34;https://github.com/snnd/docker-ghost-bundle.git&#34;&gt;https://github.com/snnd/docker-ghost-bundle.git&lt;/a&gt;&lt;/code&gt; and changed the directory name to &lt;code class=&#34;language-none&#34;&gt;mycodingblog/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also added all of my data, images and theme files to the appropriate directories. Next, I edited the &lt;code class=&#34;language-none&#34;&gt;mycodingblog/config/config.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var path = require(&#39;path&#39;),
		config;

config = {
	production: {
		url: &#39;http://mycodingblog.com/&#39;,
		mail: {},
		database: {
			client: &#39;sqlite3&#39;,
			connection: {
				filename: path.join(&#39;/usr/src/ghost/content/data/ghost.db&#39;)
			},
			debug: true
		},

		server: {
			host: &#39;0.0.0.0&#39;,
			port: &#39;2368&#39;
		}
	}
};

module.exports = config;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I edited the &lt;code class=&#34;language-none&#34;&gt;start.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

docker run -d --name mycodingblog \
	-p 8080:2368 \
	-e VIRTUAL_HOST=mycodingblog.com \
	-e NODE_ENV=production \
	-v /mycodingblog/content/themes:/usr/src/ghost/content/themes \
	-v /mycodingblog/content/apps:/usr/src/ghost/content/apps \
	-v /mycodingblog/content/images:/usr/src/ghost/content/images \
	-v /mycodingblog/content/data:/usr/src/ghost/content/data \
	-v /mycodingblog/config:/var/lib/ghost \
	ghost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I typed &lt;code class=&#34;language-none&#34;&gt;./start.sh&lt;/code&gt;. Of course this was after playing around with it for a few hours. Make sure to use the &lt;code class=&#34;language-none&#34;&gt;-d&lt;/code&gt; flag to run in detached mode. It started up and told me to point my browser to &lt;code class=&#34;language-none&#34;&gt;&lt;a href=&#34;http://mycodingblog.com&#34;&gt;http://mycodingblog.com&lt;/a&gt;&lt;/code&gt;. So now you should have a ghost container up and running.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My First Post with Ghost</title>
      <link>/post/my-first-post-with-ghost/</link>
      <pubDate>Sat, 05 Sep 2015 15:01:52 -0600</pubDate>
      
      <guid>/post/my-first-post-with-ghost/</guid>
      <description>&lt;p&gt;So I&amp;rsquo;ve decided to start a blog and write about my journey of starting a new career. I just landed a job as a Junior Web Developer and I really wish I would have done this sooner! My goal for this blog is to gain a better understanding of the topics that I post about and hopefully help other new developers find their way through the maze of learning to code.&lt;/p&gt;

&lt;p&gt;I have chosen to use &lt;a href=&#34;https://ghost.org/&#34;&gt;ghost&lt;/a&gt; as my means to accomplish this. I wanted to play around with it before I decided to put it up on a server, so I started off with &lt;a href=&#34;https://github.com/dbough/vagrant-ghost&#34;&gt;this repo&lt;/a&gt; on Github and typed &lt;code&gt;vagrant up&lt;/code&gt; in my terminal. Assuming you have &lt;a href=&#34;https://vagrantup.com&#34;&gt;vangrant&lt;/a&gt;, if not, check them out. It was actually quite simple once I figured out the best way to go about installing it. I&amp;rsquo;m also looking forward to tweaking the default theme and maybe writing out a small tutorial on how I accomplished this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;My goal is to make a new post at least once a week and hopefully have a way for interested users to subscribe to it. That is, if you find what I have to say useful. &lt;del&gt;I will also be looking for a way to add a comment section to each post&lt;/del&gt;, as I would like the feedback and collaboration that hopefully comes along with this endeavor.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Up &amp; Running with Ghost and Digital Ocean</title>
      <link>/post/up-and-running-with-ghost-and-digital-ocean/</link>
      <pubDate>Sat, 05 Sep 2015 12:06:37 -0600</pubDate>
      
      <guid>/post/up-and-running-with-ghost-and-digital-ocean/</guid>
      <description>&lt;p&gt;I know there are numerous tutorials on how to setup Ghost with Digital Ocean, but I figured I&amp;rsquo;d throw mine into the hat. This will be a quick and to the point tutorial of how to get your start a Ghost blog with Digital Ocean.&lt;/p&gt;

&lt;p&gt;First, a quick introduction to &lt;a href=&#34;https://ghost.org&#34;&gt;Ghost&lt;/a&gt; and &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;Digital Ocean&lt;/a&gt;. Ghost is an open source blogging platform that is easy to get up and running. It functions like a CMS and your posts are written in Markdown. Digital Ocean is a cloud hosting provider. They offer good prices and have a good deal of tutorials to help you get up and running. I&amp;rsquo;ll be honest, it took me a few days of research and playing around to get one of my sites up and running as I had only used GoDaddy before. So knowing your way around the terminal helps, but isn&amp;rsquo;t required for this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And so it begins&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;creating-a-droplet&#34;&gt;Creating A Droplet&lt;/h2&gt;

&lt;p&gt;You will need an account at Digital Ocean and then you will need to create a droplet. Fill in whatever you want to call your droplet for your Droplet Hostname and then select a size. I&amp;rsquo;m currently using the 512 MB for this blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/DigitalOcean_Control_Panel.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Select where you want your droplet hosted. I live in the U.S., so naturally, I chose one close to me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/DigitalOcean_Control_Panel-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now select the Ghost image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/DigitalOcean_Control_Panel_and_root_personal-blog____-_ssh_-_88-42.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next you will need to choose any additional settings like backups and private networking. I&amp;rsquo;m didn&amp;rsquo;t select any. Backups might not be a bad idea, though&amp;hellip;&lt;/p&gt;

&lt;p&gt;Optionally, you can add you ssh key to use when logging into the droplet instead of a password. If you would like to use an ssh key and you have one on your Mac simply open your terminal and type &lt;code class=&#34;language-none&#34;&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt; to copy it to your clipboard. Then add it by using &lt;code class=&#34;language-none&#34;&gt;cmd v&lt;/code&gt; or right click &lt;code class=&#34;language-none&#34;&gt;paste&lt;/code&gt;. If you do not have an ssh key, a good tutorial can be found on Github &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you are ready to create your droplet. This will take a minute or so, then you will receive an email containing all of the important information about your new droplet.&lt;/p&gt;

&lt;h2 id=&#34;configure-your-nameservers&#34;&gt;Configure Your Nameservers&lt;/h2&gt;

&lt;p&gt;If you haven&amp;rsquo;t done so already, you will need to point your nameservers from your domain registrar to Digital Ocean. For more info, check out &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-host-name-with-digitalocean&#34;&gt;Digital Ocean&amp;rsquo;s instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;your-new-blog&#34;&gt;Your New Blog&lt;/h2&gt;

&lt;p&gt;Now you can navigate to the IP address given to you from Digital Ocean and you should see your new blog. To log in, type &lt;code class=&#34;language-none&#34;&gt;123.45.678.90/ghost&lt;/code&gt; in the address bar, replacing the example IP with your IP. This should take you to a signup form where you will need to fill out your information. This information is strictly for this droplet so that you can log in and edit/publish to your blog. Once that&amp;rsquo;s complete, you should be logged in.&lt;/p&gt;

&lt;h2 id=&#34;set-up-a-domain-name&#34;&gt;Set up a Domain Name&lt;/h2&gt;

&lt;p&gt;To log into my droplets, I use my terminal. You can also use the console on Digital Ocean, but I find my terminal more cooperative and only use the console they provide when/if something happens. Like banning my IP address when testing out flightplan.js while using fail2ban. That was a frustrating experience.&lt;/p&gt;

&lt;p&gt;At any rate, open your terminal and and log in to your droplet. To do this type &lt;code class=&#34;language-none&#34;&gt;ssh root@123.45.678.90&lt;/code&gt; again, using your IP address instead of the one here. If you chose to use an ssh key, you will automatically be logged in. If not, you will be prompted for a password. This password will be the same one you received from Digital Ocean in your email.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not that familiar with the terminal, when you type or paste your password into the terminal, it will not provide any feedback for security purposes. Just press enter. Once in, it will ask you again for the password. Then it will ask for a new password that you will need to input twice.&lt;/p&gt;

&lt;p&gt;Now, you will need to open the nginx configuration file and edit the server_name. Type &lt;code class=&#34;language-none&#34;&gt;vi /etc/nginx/sites-available/ghost&lt;/code&gt; . Below is what the file should look like. You will need to change the &lt;code class=&#34;language-none&#34;&gt;my-ghost-blog.com&lt;/code&gt; value to your domain name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
    listen 80;
    server_name my-ghost-blog.com ;

    location / {
        proxy_pass http://localhost:2368/;
        proxy_set_header Host $host;
        proxy_buffering off;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After changing the value of &lt;code class=&#34;language-nginx&#34;&gt;server_name&lt;/code&gt; to your domain name, press the &lt;code class=&#34;language-none&#34;&gt;esc&lt;/code&gt; key and then type &lt;code class=&#34;language-none&#34;&gt;:wq&lt;/code&gt; to save and quit vi.&lt;/p&gt;

&lt;p&gt;You will now need to edit the &lt;code class=&#34;language-none&#34;&gt;config.js&lt;/code&gt; file. Type &lt;code class=&#34;language-none&#34;&gt;vi /var/www/ghost/config.js&lt;/code&gt; to open the file. You should now see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;// # Ghost Configuration
// Setup your Ghost install for various [environments](http://support.ghost.org/config#about-environments).

// Ghost runs in &#39;development&#39; mode by default. Full documentation can be found at http://support.ghost.org/config/

var path= require(&#39;path&#39;),
    config;

config = {
    // ## Production
    // When running Ghost in the wild, use the production environment.
    // Configure your URL and mail settings here
    production: {
        url: &#39;http://my-ghost-blog.com&#39;,
        mail: {},
        database: {
            client: &#39;sqlite3&#39;,
            connection: {
                filename: path.join(__dirnam, &#39;/content/data/ghost.db&#39;)
            },
            debug: false
        },

        server: {
            host: &#39;127.0.0.1&#39;,
            port: &#39;2368&#39;
        }
    },

    // ### Development **(default)**
    development: {

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to change the &lt;code class=&#34;language-javascript&#34;&gt;url: &amp;lsquo;&lt;a href=&#34;http://my-ghost-blog.com&#39;&#34;&gt;http://my-ghost-blog.com&#39;&lt;/a&gt;&lt;/code&gt; to &lt;code class=&#34;language-javascript&#34;&gt;url: &amp;lsquo;&lt;a href=&#34;http://YOUR-DOMAIN.com&#39;&#34;&gt;http://YOUR-DOMAIN.com&#39;&lt;/a&gt;&lt;/code&gt; in the &lt;code class=&#34;language-none&#34;&gt;production&lt;/code&gt; block. Again, after editing the file press the &lt;code class=&#34;language-none&#34;&gt;esc&lt;/code&gt; key and the type &lt;code class=&#34;language-none&#34;&gt;:wq&lt;/code&gt; to save and quit the text editor.&lt;/p&gt;

&lt;p&gt;Finally, you will need to restart Ghost with &lt;code class=&#34;language-nginx&#34;&gt;service ghost restart&lt;/code&gt; for the changes to be applied. There are other options that you can configure in this file. Visit the &lt;a href=&#34;https://support.ghost.org/config/&#34;&gt;Ghost Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you are ready to publish your first blog post! This tutorial turned out longer than I had originally planned. However, hopefully it will help you quickly set up Ghost with Digital Ocean. If you run into any issues, there are numerous tutorials from Digital Ocean and in the support documentation at &lt;a href=&#34;https://support.ghost.org&#34;&gt;https://support.ghost.org&lt;/a&gt;. Feel free to leave a comment or any questions you may have below.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>