<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node on My Coding Blog</title>
    <link>/tags/node/index.xml</link>
    <description>Recent content in Node on My Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/node/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node Email Templates</title>
      <link>/post/node-email-templates/</link>
      <pubDate>Tue, 29 Dec 2015 13:01:54 -0600</pubDate>
      
      <guid>/post/node-email-templates/</guid>
      <description>&lt;p&gt;I have been looking for a straight forward way to use email templates in a contact form. I have searched and searched with no real success. So, I thought I would write a tutorial on how to build a (very!) simple contact page that uses an email template. This uses &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;, &lt;a href=&#34;http://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt; and &lt;a href=&#34;https://github.com/niftylettuce/node-email-templates&#34;&gt;node-email-templates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-file-structure&#34;&gt;Basic File Structure&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;├── app
  ├── css
    └── main.css
  ├── templates
    └── contact-request
      ├── html.hbs
      ├── style.css
      └── text.hbs
  └── index.html
├── package.json
└── server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will start out by adding &lt;a href=&#34;http://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt;, &lt;a href=&#34;http://expressjs.com/&#34;&gt;express&lt;/a&gt; and &lt;a href=&#34;https://github.com/niftylettuce/node-email-templates&#34;&gt;email-templates&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to fill in the information or press enter until it is complete. I have my &lt;code class=&#34;language-none&#34;&gt;entry-point&lt;/code&gt; set as &lt;code class=&#34;language-none&#34;&gt;server.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;npm install -S express email-templates handlebars
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install those packages and add them to our dependencies in the &lt;code class=&#34;language-none&#34;&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;basic-styling-and-markup&#34;&gt;Basic Styling and Markup&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- app/index.html --&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot; placeholder=&amp;quot;Name&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; placeholder=&amp;quot;Email&amp;quot;&amp;gt;
  &amp;lt;textarea name=&amp;quot;message&amp;quot; id=&amp;quot;message&amp;quot; cols=&amp;quot;30&amp;quot; rows=&amp;quot;10&amp;quot; placeholder=&amp;quot;Enter your message.&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;button id=&amp;quot;send-contact&amp;quot; type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* app/css/main.css */
* {
  box-sizing: border-box;
}
body {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding-top: 50px;
  background-color: #ccc;
}
input {
  margin-bottom: 20px;
  width: 300px;
  height: 25px;
  font-size: 16px;
  color: #3e3e3e;
}
textarea {
  font-size: 16px;
  width: 300px;
  margin-bottom: 20px;
  color: #3e3e3e;
}
button {
  padding: 15px 25px;
  font-size: 16px;
  cursor: pointer;
  color: #3e3e3e;
}
button:hover {
  background-color: #3e3e3e;
  color: #fefefe;
}
.alert {
  display: flex;
  align-items: center;
  justify-content: center;
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  color: #fff;
  margin: 20px;
  padding: 15px;
  border-radius: 5px;
}
.error {
  background-color: #c43c35;
  background-repeat: repeat-x;
  background-image: linear-gradient(top, #ee5f5b, #c43c35);
  border-color: #c43c35 #c43c35 #882a25;
}
.success {
  background-color: #57a957;
  background-repeat: repeat-x;
  background-image: linear-gradient(top, #62c462, #57a957);
  border-color: #57a957 #57a957 #3d773d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-up-express&#34;&gt;Setting up Express&lt;/h2&gt;

&lt;p&gt;Since we are using express, it&amp;rsquo;s pretty simple to get our server going. You can follow the &lt;a href=&#34;http://expressjs.com/en/starter/installing.html&#34;&gt;getting started&lt;/a&gt; and &lt;a href=&#34;http://expressjs.com/en/starter/hello-world.html&#34;&gt;hello world&lt;/a&gt; quick tutorials. Below is what our base &lt;code class=&#34;language-none&#34;&gt;server.js&lt;/code&gt; file will currently look like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// server.js
var express = require(&#39;express&#39;);
var app     = express();

app.use(express.static(&#39;app&#39;));

var server = app.listen(8080, function(){
  var host = &#39;localhost&#39;;
  var port = server.address().port;

  console.log(&#39;Example app listening at http://%s:%s&#39;, host, port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to view the &lt;code class=&#34;language-none&#34;&gt;index.html&lt;/code&gt; contact page in your browser (&lt;code class=&#34;language-none&#34;&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt;) by typing &lt;code class=&#34;language-none&#34;&gt;node server.js&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-nodemailer&#34;&gt;Setting up Nodemailer&lt;/h2&gt;

&lt;p&gt;So we are using &lt;a href=&#34;http://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt; to help us send our emails. In order to use the package, we will need to add it to our dependencies and install it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;npm install -S nodemailer@0.7.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get a better understanding of &lt;a href=&#34;http://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt;, I would encourage you to read through the documentation as I will just highlight the basics to get our simple contact page up and running. We will use the basic example given by &lt;a href=&#34;http://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt; in our project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// server.js
var express    = require(&#39;express&#39;);
var app	    = express();
var nodemailer = require(&#39;nodemailer&#39;);

app.use(express.static(&#39;app&#39;));

// nodemailer
var smtpTransport = nodemailer.createTransport(&#39;SMTP&#39;, {
  service: &amp;quot;Gmail&amp;quot;,
  auth: {
    user: &#39;user@gmail.com&#39;,
    pass: &#39;password&#39;
  }
});

var mailOptions = {
  from: &#39;Fred Foo &amp;lt;foo@blurdybloop.com&amp;gt;&#39;, // Sender Address
  to: &#39;user@gmail.com&#39;,
  subject: &#39;Contact Request&#39;, // Subject Line
  text: &#39;Hello World!&#39;, // Plaintext Body
  html: &#39;&amp;lt;b&amp;gt;Hello Word! &amp;lt;/b&amp;gt;&#39; // HTML Body
}

smtpTransport.sendMail(mailOptions, function (error, response) {
  if (error) {
    console.log(error);
  } else{
    console.log(&#39;Message sent: &#39; + response.message);
  }
});

var server = app.listen(8080, function () {
  var host = &#39;localhost&#39;;
  var port = server.address().port;

  console.log(&#39;Example app listening at http://%s:%s&#39;, host, port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you startup your server, &lt;code class=&#34;language-none&#34;&gt;node server.js&lt;/code&gt;, you should receive an email (assuming you added your email address and password to the &lt;code class=&#34;language-none&#34;&gt;user:&lt;/code&gt; and &lt;code class=&#34;language-none&#34;&gt;pass:&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Now that we know it works, we need to wrap &lt;code class=&#34;language-none&#34;&gt;mailOptions&lt;/code&gt; and &lt;code class=&#34;language-javascript&#34;&gt;smtpTransport.sendMail&lt;/code&gt; with a &lt;code class=&#34;language-javascript&#34;&gt;get()&lt;/code&gt; method so we don&amp;rsquo;t get an email every time we start up our app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// server.js
var express    = require(&#39;express&#39;);
var app	    = express();
var nodemailer = require(&#39;nodemailer&#39;);

app.use(express.static(&#39;app&#39;));

// nodemailer
var smtpTransport = nodemailer.createTransport(&#39;SMTP&#39;, {
  service: &amp;quot;Gmail&amp;quot;,
  auth: {
    user: &#39;user@gmail.com&#39;,
    pass: &#39;password&#39;
  }
});

app.get(&#39;/sendContact&#39;, function (req, res) {
  var mailOptions = {
    from: &#39;Fred Foo &amp;lt;foo@blurdybloop.com&amp;gt;&#39;, // Sender Address
    to: &#39;user@gmail.com&#39;,
    subject: &#39;Contact Request&#39;, // Subject Line
    text: &#39;Hello World!&#39;, // Plaintext Body
    html: &#39;&amp;lt;b&amp;gt;Hello Word! &amp;lt;/b&amp;gt;&#39; // HTML Body
}

  smtpTransport.sendMail(mailOptions, function (error, response) {
    if (error) {
      console.log(error);
    } else{
      console.log(&#39;Message sent: &#39; + response.message);
    }
  });
});

var server = app.listen(8080, function () {
  var host = &#39;localhost&#39;;
  var port = server.address().port;

  console.log(&#39;Example app listening at http://%s:%s&#39;, host, port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-the-form-data&#34;&gt;Using the Form Data&lt;/h2&gt;

&lt;p&gt;Next we will want to use our form to capture the data the user will input. For simplicity, I&amp;rsquo;ll add jQuery to our project and add another file called &lt;code class=&#34;language-none&#34;&gt;main.js&lt;/code&gt; to &lt;code class=&#34;language-none&#34;&gt;app/scripts/main.js&lt;/code&gt;. I&amp;rsquo;ll add jQuery by inserting it at the bottom of the &lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; inside the &lt;code class=&#34;language-none&#34;&gt;index.html&lt;/code&gt; with &lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;ldquo;&lt;a href=&#34;https://code.jquery.com/jquery-2.1.4.min.js&amp;quot;&amp;gt;&#34;&gt;https://code.jquery.com/jquery-2.1.4.min.js&amp;quot;&amp;gt;&lt;/a&gt;&lt;/code&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; along with &lt;code class=&#34;language-none&#34;&gt;&amp;lt;script src=&amp;ldquo;scripts/main.js&amp;rdquo;&amp;gt;&lt;/code&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; just below it. Next we&amp;rsquo;ll create the &lt;code class=&#34;language-none&#34;&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// app/scripts/main.js

$(&#39;#send-contact&#39;).click(function (evt) {
  evt.preventDefault();
  var name = $(&#39;#name&#39;).val();
  var email = $(&#39;#email&#39;).val();
  var message = $(&#39;#message&#39;).val();

  if (name !== &#39;&#39; &amp;amp;&amp;amp; email !== &#39;&#39; &amp;amp;&amp;amp; message != &#39;&#39;) {
    $.get(&#39;http://localhost:8080/sendContact&#39;, {
      name: name,
      email: email,
      message: message
    }, function (data) {
      if (data == &#39;sent&#39;) {
        $(&#39;.alert&#39;).html(&#39;&amp;lt;strong&amp;gt;Success! &amp;lt;/strong&amp;gt; Your message has been sent!&#39;).addClass(&#39;success&#39;);
      } else {
        $(&#39;.alert&#39;).html(&amp;quot;&amp;lt;strong&amp;gt;Uh oh! &amp;lt;/strong&amp;gt; It looks like that didn&#39;t go through, let&#39;s try that again.&amp;quot;).addClass(&#39;error&#39;);
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-the-email-templates-to-server-js&#34;&gt;Add the Email Templates to Server.js&lt;/h2&gt;

&lt;p&gt;We will now add node-email-templates to our server.js file. For completeness, I have added the entire server.js file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var express 	  = require(&#39;express&#39;);
var app		   = express();
var nodemailer    = require(&#39;nodemailer&#39;);
var path	      = require(&#39;path&#39;);
var EmailTemplate = require(&#39;email-templates&#39;).EmailTemplate;

var templatesDir = path.resolve(__dirname, &#39;app/templates&#39;);

app.use(express.static(&#39;app&#39;));

// nodemailer
var smtpTransport = nodemailer.createTransport(&#39;SMTP&#39;, {
  service: &amp;quot;Gmail&amp;quot;,
  auth: {
    user: &#39;user@gmail.com&#39;,
    pass: &#39;password&#39;
  }
});

app.get(&#39;/sendContact&#39;, function (req, res) {
  var template = new EmailTemplate(path.join(templatesDir, &#39;contact-request&#39;));
  var locals = {
    email: req.query.email,
    name: req.query.name,
    message: req.query.message
  };

  template.render(locals, function (err, results) {
    if (err) {
      return console.error(err);
    }

    smtpTransport.sendMail({
      from: locals.email,
      to: &#39;user@gmail.com&#39;,
      subject: &#39;Contact Request&#39;,
      html: results.html,
      text: results.text
    }, function (err, responseStatus) {
      if (err) {
        console.error(err);
  res.end(&#39;error&#39;);
      } else {
        console.log(responseStatus.message);
        res.end(&#39;sent&#39;);
      }
    });
  });
});

var server = app.listen(8080, function () {
  var host = &#39;localhost&#39;;
  var port = server.address().port;

  console.log(&#39;Example app listening at http://%s:%s&#39;, host, port);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;email-templates&#34;&gt;Email Templates&lt;/h2&gt;

&lt;p&gt;Our emails should now be sending, but in order to test them, we will need to add our templates. Unfortunately, with node-email-templates, there isn&amp;rsquo;t a way for us to easily style the templates without sending an email to ourselves. But to help shorten this tutorial, I&amp;rsquo;ll add some styling to our templates so we can test our email and wrap this tutorial up.&lt;/p&gt;

&lt;p&gt;We will need to add an &lt;code class=&#34;language-none&#34;&gt;html.hbs&lt;/code&gt; and &lt;code class=&#34;language-none&#34;&gt;text.hbs&lt;/code&gt; to our &lt;code class=&#34;language-none&#34;&gt;templates/contact-request&lt;/code&gt; directory. We have the &lt;code class=&#34;language-none&#34;&gt;text.hbs&lt;/code&gt; for better support.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- app/templates/contact-request/html.hbs --&amp;gt;

&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;h3 class=&amp;quot;center&amp;quot;&amp;gt;Contact Request&amp;lt;/h3&amp;gt;
  &amp;lt;p class=&amp;quot;center&amp;quot;&amp;gt;{{ name }} has filled out the contact form on your website with the following message:&amp;lt;/p&amp;gt;

&amp;lt;blockquote&amp;gt;
  &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;

&amp;lt;p class=&amp;quot;center small&amp;quot;&amp;gt;To respond to {{ name }}, you may reply directly to this email or send an email to {{ email }}.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- app/templates/contact-request/text.hbs --&amp;gt;

Contact Request

{{ name }} has filled out the contact form on your website with the following message:

{{ message }}

To respond to {{ name }}, you may reply directly to this email or send an email to {{ email }}.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;* {
  box-sizing: border-box;
}
.container {
  border: 1px solid #e5e3d8;
  padding: 20px;
  border-radius: 5px
}
h3,
p {
  color: #808284;
  font-family: sans-serif;
  line-height: 1.5em;
}
h3 {
  font-size: 16px;
}
p {
  font-size: 15px;
}
blockquote {
  background: #f9f9f9;
  border-left: 10px solid #ccc;
  margin: 1.5em 10px;
  padding: 0.5em 10px;
}
blockquote p {
  display: inline;
}
.center {
  text-align: center;
}
.small {
  font-size: 10;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should give us a nice template to use as a starting point. There is still plenty of work that needs to be done (form validation for starters), but this concludes this tutorial. You should have a working contact form with a nicely styled template. There are other options out there like &lt;a href=&#34;https://github.com/andrewrk/swig-email-templates&#34;&gt;Swig&lt;/a&gt; that allow us to view the changes to the template in a browser. I hope to have a tutorial of that up soon.&lt;/p&gt;

&lt;p&gt;As always, feedback is welcome and if you run into any problems or have any questions, let me know in the comments below and I will try my best to help you out. I have added the code used in this tutorial to &lt;a href=&#34;https://github.com/krjordan/node-email&#34;&gt;github&lt;/a&gt; in case anyone wanted to play around with it or use it as a starting point.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>